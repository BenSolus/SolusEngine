# Build Configuration for Travis CI
# https://travis-ci.org

dist: trusty
sudo: required
language: cpp

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - build-essential
      - git
      - libgnome-keyring-dev
      - fakeroot
      - xorg-dev
      - libwayland-dev
      - libassimp-dev
      - libgtest-dev
      - ninja-build
      - gcc-5
      - g++-5

matrix:
  include:
    - os: linux
      compiler:
        - gcc
    - os: linux
      compiler:
        - clang

before_install:
  ### Set compiler versions
  - if [ "$CC" = "gcc" ]; then export CC="gcc-5"; fi
  - if [ "$CXX" = "g++" ]; then export CXX="g++-5"; fi

  ### Download and install a more recen CMake.
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get remove cmake -y; fi

  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then CMAKE_INSTALLER=install-cmake.sh; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then curl -sSL https://cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.sh -o ${CMAKE_INSTALLER}; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then chmod +x ${CMAKE_INSTALLER}; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo ./${CMAKE_INSTALLER} --prefix=/usr/local --skip-license; fi

  ### Install Google Test
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd /usr/src/gtest; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo cmake -DBUILD_SHARED_LIBS=ON CMakeLists.txt; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo make; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo cp *.so /usr/lib; fi

  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd $TRAVIS_BUILD_DIR; fi

  ### Install OpenGL Mathematics
  - if [ $TRAVIS_OS_NAME = "linux" ]; then git clone https://github.com/g-truc/glm.git; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd glm; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo cmake -DGLM_TEST_ENABLE_CXX_11=ON CMakeLists.txt; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo make; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo make install; fi

  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd ..; fi

  ### Install glslang
  - if [ $TRAVIS_OS_NAME = "linux" ]; then git clone https://github.com/KhronosGroup/glslang.git; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then mkdir -p glslang/build; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd glslang/build; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cmake -GNinja -DCMAKE_BUILD_TYPE=Release ..; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo ninja install; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd ../..; fi

  ### Install SPIRV-Tools
  - if [ $TRAVIS_OS_NAME = "linux" ]; then git clone https://github.com/KhronosGroup/SPIRV-Tools.git; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd SPIRV-Tools; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then git clone https://github.com/KhronosGroup/SPIRV-Headers.git ./external/spirv-headers; fi 
  - if [ $TRAVIS_OS_NAME = "linux" ]; then mkdir -p build; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd build; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cmake -DSPIRV_WERROR=OFF -DCMAKE_BUILD_TYPE=Release ..; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo cmake --build . --target install; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd ../..; fi
  
  ### Install Vulkan header files
  - if [ $TRAVIS_OS_NAME = "linux" ]; then git clone https://github.com/KhronosGroup/Vulkan-Headers.git; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd Vulkan-Headers; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then mkdir build; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd build || exit 1; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cmake ..; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo cmake --build . --target install; fi

  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd ../..; fi

  ### Install Vulkan loader
  - if [ $TRAVIS_OS_NAME = "linux" ]; then git clone https://github.com/KhronosGroup/Vulkan-Loader.git; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd Vulkan-Loader; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then mkdir build; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd build || exit 1; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cmake -DCMAKE_BUILD_TYPE=Debug -DVULKAN_HEADERS_INSTALL_DIR=/usr/local/include ..; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo cmake --build . --target install; fi

  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd ../..; fi

  ### Install Vulkan validation layers
  - if [ $TRAVIS_OS_NAME = "linux" ]; then git clone https://github.com/KhronosGroup/Vulkan-ValidationLayers.git; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd Vulkan-ValidationLayers; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then mkdir build; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd build || exit 1; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cmake -DCMAKE_BUILD_TYPE=Debug -DVULKAN_HEADERS_INSTALL_DIR=/usr/local/include -DGLSLANG_INSTALL_DIR=/usr/local/include ..; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo cmake --build . --target install; fi

  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd ../..; fi

  ### Install Vulkan utilities and tools
  - if [ $TRAVIS_OS_NAME = "linux" ]; then git clone https://github.com/KhronosGroup/Vulkan-Tools.git; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd Vulkan-Tools; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then mkdir build; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd build || exit 1; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cmake -DCMAKE_BUILD_TYPE=Debug ..; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo cmake --build . --target install; fi

  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd ../..; fi

  ### Install GLFW
  - if [ $TRAVIS_OS_NAME = "linux" ]; then git clone https://github.com/glfw/glfw.git; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then mkdir -p glfw/build; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd glfw/build || exit 1; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cmake -DBUILD_SHARED_LIBS=ON ..; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then make; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then sudo make install; fi
  - if [ $TRAVIS_OS_NAME = "linux" ]; then cd ../..; fi

script:
  - mkdir -p build
  - cd build || exit 1
  - cmake -DCMAKE_BUILD_TYPE=Debug ..
  - make -j2

notifications:
  email:
    on_success: never
    on_failure: change

branches:
  only:
    - master

git:
  depth: 10
